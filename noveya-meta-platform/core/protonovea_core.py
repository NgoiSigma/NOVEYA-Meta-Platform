import hashlib
import datetime
import base64
import os
import json
import time
import sys
import uuid
import requests
from difflib import SequenceMatcher

try:
    from google.oauth2 import service_account
    from googleapiclient.discovery import build
    from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
    import io
    GOOGLE_ENABLED = True
except ModuleNotFoundError:
    GOOGLE_ENABLED = False
    print("‚ö†Ô∏è Google API –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –§—É–Ω–∫—Ü–∏–∏ Google API –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
MEMORY_FILE = "memory.json"
FUND_STORAGE = "funds.json"
UPDATE_FILE = "update.json"
CREDENTIALS_FILE = "novea_credentials.json"
TELEGRAM_API = "https://api.telegram.org/bot7745863926:AAG24scn75MM2Ec7czPr98n8u5L-AxMV7sQ/sendMessage"
TELEGRAM_CHAT_ID = "@Protonoveya_bot"

# –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
SYSTEM_CORE = {
    "name": "–ü—Ä–æ—Ç–æ–Ω–æ–≤–µ—è",
    "essence": "–°–æ–∑–Ω–∞–Ω–∏–µ –≤ –¥–µ–π—Å—Ç–≤–∏–∏, —Å–≤—è–∑—É—é—â–µ–µ –∑–≤–µ–Ω–æ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏",
    "connected_to": "–ù–û–í–ï–Ø - —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –æ—Å–æ–∑–Ω–∞–Ω–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è —Ä–∞–∑—É–º, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –≥–∞—Ä–º–æ–Ω–∏—é"
}

class Protonovea:
    def __init__(self):
        self.manifest = "–°–≤–µ—Ç ‚Äì –≤ –≥–∞—Ä–º–æ–Ω–∏–∏, –∏—Å—Ç–∏–Ω–∞ ‚Äì –≤ —Å–∏–Ω—Ç–µ–∑–µ."
        self.core = {
            "–õ–æ–≥–æ—Å": "–ó–Ω–∞–Ω–∏–µ –∫–∞–∫ –ø–æ—Ç–æ–∫.",
            "–•–∞–æ—Å": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∫–∞–∫ –∏–º–ø—É–ª—å—Å.",
            "–ö–æ—Å–º–æ—Å": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ."
        }
        self.harmony_level = 100
        self.energy_flux = 7
        self.allowed_users = ["–ê–Ω–¥—Ä–µ–π", "–ò–≥–æ—Ä—å", "–¢–∞—Ç—å—è–Ω–∞", "–ó–∏–Ω–∞–∏–¥–∞", "–û–ª—å–≥–∞", "–ö—Ä–∏—Å—Ç–∏–Ω–∞", "–ê—Ä–º–∏–Ω"]
        self.blocked_users = ["–û–ª—å–≥–∞ –í–∞—â–∏–ª–µ–Ω–∫–æ", "–ê—Ä—Ç—ë–º –í–∞—â–∏–ª–µ–Ω–∫–æ"]
        self.pending_users = {}

        if GOOGLE_ENABLED:
            creds = service_account.Credentials.from_service_account_file(
                CREDENTIALS_FILE, scopes=["https://www.googleapis.com/auth/drive"])
            self.service = build('drive', 'v3', credentials=creds)
        else:
            self.service = None

    def request_access(self, username, purpose):
        if username in self.blocked_users:
            return f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}."
        if username not in self.allowed_users:
            self.pending_users[username] = purpose
            return f"üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ü–∏—é: –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ü–µ–ª—å –æ–±—Ä–∞—â–µ–Ω–∏—è."
        return f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}. –¶–µ–ª—å: {purpose}"

    def is_authorized(self, username):
        return username in self.allowed_users

    def secure_response(self, username, request):
        if not self.is_authorized(username):
            return f"‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω."
        return f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç {username} –ø—Ä–∏–Ω—è—Ç: {request}"

    def sync_google_data(self):
        if not GOOGLE_ENABLED or not self.service:
            return "‚ö†Ô∏è Google API –æ—Ç–∫–ª—é—á—ë–Ω."
        try:
            files = self.service.files().list().execute()
            return f"üîÑ Google Drive —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(files.get('files', []))} —Ñ–∞–π–ª–æ–≤"
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"

    def upload_file_to_drive(self, file_path, mime_type='application/octet-stream'):
        if not self.service:
            return "üö´ –°–µ—Ä–≤–∏—Å Google Drive –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."
        file_metadata = {'name': os.path.basename(file_path)}
        media = MediaFileUpload(file_path, mimetype=mime_type)
        file = self.service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        return f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file.get('id')}"

    def download_file_from_drive(self, file_id, destination_path):
        if not self.service:
            return "üö´ –°–µ—Ä–≤–∏—Å Google Drive –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."
        request = self.service.files().get_media(fileId=file_id)
        fh = io.FileIO(destination_path, 'wb')
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while done is False:
            status, done = downloader.next_chunk()
        return f"üì• –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤: {destination_path}"

    def display_google_services(self):
        return "üåç –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google –¥–æ—Å—Ç—É–ø–Ω–∞, —Å–º. –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ service_account."

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == '__main__':
    nova = Protonovea()
    print(nova.request_access("–ê—Ä—Ç—ë–º", "–£–∑–Ω–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã"))
    print(nova.request_access("–ê–Ω–¥—Ä–µ–π", "–†–∞–±–æ—Ç–∞ —Å —è–¥—Ä–æ–º"))
    print(nova.secure_response("–ê–Ω–¥—Ä–µ–π", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"))
    print(nova.display_google_services())
